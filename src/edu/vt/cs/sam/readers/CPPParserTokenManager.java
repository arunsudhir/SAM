/* Generated By:JJTree&JavaCC: Do not edit this line. CPPParserTokenManager.java */
package edu.vt.cs.sam.readers;
import edu.vt.cs.sam.*;
import edu.vt.cs.sam.attributes.*;
import edu.vt.cs.sam.visitors.*;
import edu.vt.cs.sam.handlers.*;
import util.*;
import java.io.*;
import java.util.*;
import java.util.regex.*;

public class CPPParserTokenManager implements CPPParserConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x80007fffffffffffL) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            return 39;
         }
         if ((active0 & 0xa00000000800000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x80007fffffff7f3fL) != 0L || (active2 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active1 & 0x80c0L) != 0L)
            return 39;
         return -1;
      case 2:
         if ((active0 & 0xe000000000000000L) != 0L || (active1 & 0x80007ff7fff56fbfL) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 2;
            return 39;
         }
         if ((active1 & 0x8000a1000L) != 0L)
            return 39;
         return -1;
      case 3:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x80006ef3fff12cbdL) != 0L || (active2 & 0x1bL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 3;
            return 39;
         }
         if ((active0 & 0xa000000000000000L) != 0L || (active1 & 0x110400044302L) != 0L || (active2 & 0x4L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active1 & 0xad37bf124b8L) != 0L || (active2 & 0xbL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 4;
            }
            return 39;
         }
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x8000642084000805L) != 0L || (active2 & 0x10L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active1 & 0x17a4124a0L) != 0L)
            return 39;
         if ((active1 & 0xad201b00018L) != 0L || (active2 & 0x1bL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 5;
            return 39;
         }
         return -1;
      case 6:
         if ((active1 & 0xa4201a00008L) != 0L || (active2 & 0x13L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 6;
            return 39;
         }
         if ((active1 & 0x9000100010L) != 0L || (active2 & 0x8L) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active1 & 0xa00000L) != 0L || (active2 & 0x11L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 7;
            return 39;
         }
         if ((active1 & 0xa4201000008L) != 0L || (active2 & 0x2L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active1 & 0x800000L) != 0L || (active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
            return 39;
         }
         if ((active1 & 0x200000L) != 0L || (active2 & 0x1L) != 0L)
            return 39;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L, 0x0L);
      case 33:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x1100000000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 16);
      case 41:
         return jjStopAtPos(0, 17);
      case 42:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x20000010000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 21);
      case 45:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x1440000020000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x800000000800000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x4000060L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 20);
      case 60:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x500040000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0xa00080000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 22);
      case 91:
         return jjStopAtPos(0, 14);
      case 93:
         return jjStopAtPos(0, 15);
      case 94:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L, 0x4L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x8000000fL, 0x10L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000003800L, 0x8L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L, 0x1L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x17c000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x501e00000000L, 0x2L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000006000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x38000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 12);
      case 124:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0xc00000000L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 13);
      case 126:
         return jjStopAtPos(0, 55);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(1, 3);
         break;
      case 38:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         break;
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      case 43:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         break;
      case 45:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L, active2, 0L);
      case 47:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 58:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      case 60:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 62:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000080000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000000L, active1, 0x200000000001L, active2, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x203880030L, active2, 0L);
      case 102:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 79, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x440404000002L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8018000000L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000900L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000030200L, active2, 0L);
      case 111:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000004508cL, active2, 0x14L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x100800302000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x400000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0x2L);
      case 124:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(2, 60);
         break;
      case 46:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         break;
      case 61:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(2, 30);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa0000002L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x80000000000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000052500102000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x220000010020L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L, active2, 0x1L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000cL, active2, 0x18L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200800L, active2, 0x4L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000000L, active2, 0x2L);
      case 114:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x408040000000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x4000000100L, active2, 0L);
      case 116:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 81, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x2004401L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100000000280L, active2, 0L);
      case 119:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 83, 39);
         break;
      case 121:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 99, 39);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x20000000810L, active2, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 100:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 39);
         break;
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 39);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 39);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1010802420L, active2, 0x3L);
      case 103:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4001010000L, active2, 0L);
      case 108:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000400000L, active2, 0L);
      case 109:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 39);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000008000000L, active2, 0L);
      case 111:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 39);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x402000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 114:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80004000000L, active2, 0L);
      case 115:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 98, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200080000004L, active2, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8120200008L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x42000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000100000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x140800000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 101:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 39);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8200000L, active2, 0L);
      case 103:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 127, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 104:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20400008L, active2, 0L);
      case 107:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 39);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000080L, active2, 0x8L);
      case 110:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x12000L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000400L, active2, 0L);
      case 115:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 95, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L, active2, 0x1L);
      case 116:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 39);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000020L, active2, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000010L, active2, 0L);
      case 119:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 110, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, 0L, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0x8200000000L, active2, 0x2L);
      case 99:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 39);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 39);
         return jjMoveStringLiteralDfa6_0(active1, 0x200000L, active2, 0L);
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 39);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 39);
         break;
      case 101:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 39);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 39);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 80, 39);
         return jjMoveStringLiteralDfa6_0(active1, 0x1000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 39);
         break;
      case 104:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x20000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active1, 0x800010L, active2, 0x8L);
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 39);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 89, 39);
         return jjMoveStringLiteralDfa6_0(active1, 0x4000000008L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0L, active2, 0x1L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 39);
         return jjMoveStringLiteralDfa6_0(active1, 0x80001100000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, 0L, active1, active2);
}
static private final int jjMoveStringLiteralDfa6_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, 0L, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x800000L, active2, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x10L);
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 84, 39);
         return jjMoveStringLiteralDfa7_0(active1, 0x4001000000L, active2, 0L);
      case 102:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 100, 39);
         break;
      case 108:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 103, 39);
         return jjMoveStringLiteralDfa7_0(active1, 0x20000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active1, 0L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x80000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 39);
         return jjMoveStringLiteralDfa7_0(active1, 0x200200000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x8L, active2, 0L);
      case 121:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, 0L, active1, active2);
}
static private final int jjMoveStringLiteralDfa7_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, 0L, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0L, active2, 0x1L);
      case 100:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 102, 39);
         break;
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 39);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 39);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 105, 39);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 39);
         return jjMoveStringLiteralDfa8_0(active1, 0x200000L, active2, 0L);
      case 114:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 88, 39);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 39);
         return jjMoveStringLiteralDfa8_0(active1, 0x800000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, 0L, active1, active2);
}
static private final int jjMoveStringLiteralDfa8_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(8, 85, 39);
         break;
      case 101:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(8, 128, 39);
         return jjMoveStringLiteralDfa9_0(active1, 0x800000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
static private final int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 87, 39);
         break;
      case 116:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(9, 132, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 39)
                     jjAddStates(9, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  else if (curChar == 35)
                     jjCheckNAddStates(11, 13);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 115)
                        kind = 115;
                     jjCheckNAddStates(14, 21);
                  }
                  else if (curChar == 48)
                     jjAddStates(22, 25);
                  if (curChar == 48)
                  {
                     if (kind > 111)
                        kind = 111;
                     jjCheckNAddStates(26, 33);
                  }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 2:
                  if (curChar == 10 && kind > 11)
                     kind = 11;
                  break;
               case 4:
                  if (curChar == 10)
                     jjCheckNAddStates(11, 13);
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(34, 36);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if (curChar == 39 && kind > 125)
                     kind = 125;
                  break;
               case 16:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 17:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 14);
                  break;
               case 19:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 14);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 14);
                  break;
               case 21:
                  if (curChar == 48)
                     jjAddStates(37, 38);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 14);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 28:
                  if ((0x8000008400000400L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 29:
                  if (curChar == 34 && kind > 126)
                     kind = 126;
                  break;
               case 30:
                  if (curChar == 48)
                     jjCheckNAddStates(39, 42);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(39, 42);
                  break;
               case 32:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(43, 46);
                  break;
               case 34:
                  if (curChar == 48)
                     jjAddStates(47, 48);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if (curChar != 48)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAddStates(26, 33);
                  break;
               case 41:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 45);
                  break;
               case 46:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 51:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAddStates(14, 21);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 115)
                     kind = 115;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 62:
                  if (curChar == 48)
                     jjAddStates(22, 25);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjAddStates(59, 60);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(63, 65);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(78, 79);
                  break;
               case 79:
                  if (curChar != 46)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(66, 68);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(66, 68);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(81, 6);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 84:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddTwoStates(85, 86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 76)
                     jjAddStates(69, 70);
                  break;
               case 1:
                  jjAddStates(11, 13);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(71, 72);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 11:
                  if ((0x104000001040L & l) != 0L && kind > 123)
                     kind = 123;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 92)
                     jjAddStates(75, 78);
                  break;
               case 16:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 22:
                  if (curChar == 120)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(23, 14);
                  break;
               case 24:
                  if (curChar == 88)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(79, 82);
                  break;
               case 28:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 35:
                  if (curChar == 120)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(49, 52);
                  break;
               case 37:
                  if (curChar == 88)
                     jjCheckNAdd(36);
                  break;
               case 38:
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(39);
                  break;
               case 43:
                  if ((0x100000001000L & l) != 0L && kind > 112)
                     kind = 112;
                  break;
               case 45:
                  if ((0x20000000200000L & l) != 0L && kind > 113)
                     kind = 113;
                  break;
               case 47:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 48:
                  if ((0x100000001000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 49:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 50:
                  if ((0x20000000200000L & l) != 0L && kind > 114)
                     kind = 114;
                  break;
               case 54:
                  if ((0x20100000201000L & l) != 0L && kind > 116)
                     kind = 116;
                  break;
               case 56:
                  if ((0x20000000200000L & l) != 0L && kind > 117)
                     kind = 117;
                  break;
               case 58:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(87, 88);
                  break;
               case 59:
                  if ((0x100000001000L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 60:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 61:
                  if ((0x20000000200000L & l) != 0L && kind > 118)
                     kind = 118;
                  break;
               case 63:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(64);
                  break;
               case 65:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(66, 67);
                  break;
               case 67:
                  if ((0x20100000201000L & l) != 0L && kind > 120)
                     kind = 120;
                  break;
               case 68:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(69, 70);
                  break;
               case 70:
                  if ((0x20000000200000L & l) != 0L && kind > 121)
                     kind = 121;
                  break;
               case 71:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(72);
                  break;
               case 72:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 73:
                  if ((0x20000000200000L & l) != 0L)
                     jjAddStates(91, 92);
                  break;
               case 74:
                  if ((0x100000001000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 75:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 76:
                  if ((0x20000000200000L & l) != 0L && kind > 122)
                     kind = 122;
                  break;
               case 83:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(95, 96);
                  break;
               case 86:
                  if ((0x104000001040L & l) != 0L && kind > 124)
                     kind = 124;
                  break;
               case 87:
                  if (curChar == 76)
                     jjAddStates(69, 70);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 13);
                  break;
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 7);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
static private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   78, 79, 81, 6, 82, 83, 26, 27, 29, 13, 15, 1, 2, 3, 52, 53, 
   54, 55, 56, 57, 58, 60, 63, 65, 68, 71, 41, 42, 43, 44, 45, 46, 
   47, 49, 7, 8, 11, 22, 24, 26, 27, 31, 29, 26, 27, 33, 29, 35, 
   37, 26, 27, 36, 29, 46, 47, 49, 57, 58, 60, 66, 67, 69, 70, 72, 
   73, 75, 80, 8, 11, 12, 25, 4, 5, 9, 10, 16, 17, 19, 21, 28, 
   30, 32, 34, 48, 48, 50, 50, 59, 59, 61, 61, 74, 74, 76, 76, 84, 
   85, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, "\173", 
"\175", "\133", "\135", "\50", "\51", "\72\72", "\72", "\73", "\54", "\77", 
"\56\56\56", "\75", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", 
"\76\76\75", "\46\75", "\136\75", "\174\75", "\174\174", "\46\46", "\174", "\136", "\46", 
"\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", 
"\52", "\57", "\45", "\53\53", "\55\55", "\176", "\41", "\56", "\55\76", "\56\52", 
"\55\76\52", "\141\165\164\157", "\142\162\145\141\153", "\143\141\163\145", 
"\143\141\164\143\150", "\143\150\141\162", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\157", 
"\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", "\145\170\164\145\162\156", 
"\146\154\157\141\164", "\146\157\162", "\146\162\151\145\156\144", "\147\157\164\157", "\151\146", 
"\151\156\154\151\156\145", "\151\156\164", "\154\157\156\147", "\156\145\167", 
"\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", 
"\162\145\144\145\143\154\141\162\145\144", "\162\145\147\151\163\164\145\162", "\162\145\164\165\162\156", 
"\163\150\157\162\164", "\163\151\147\156\145\144", "\163\151\172\145\157\146", 
"\163\164\141\164\151\143", "\163\164\162\165\143\164", "\143\154\141\163\163", 
"\163\167\151\164\143\150", "\164\145\155\160\154\141\164\145", "\164\150\151\163", "\164\162\171", 
"\164\171\160\145\144\145\146", "\165\156\151\157\156", "\165\156\163\151\147\156\145\144", 
"\166\151\162\164\165\141\154", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\150\151\154\145", "\157\160\145\162\141\164\157\162", "\164\162\165\145", 
"\146\141\154\163\145", "\164\150\162\157\167", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\165\163\151\156\147", 
"\156\141\155\145\163\160\141\143\145", "\164\171\160\145\156\141\155\145", "\142\157\157\154", 
"\146\151\156\141\154\154\171", "\143\157\156\163\164\137\143\141\163\164", null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "IN_LINE_COMMENT", 
   "IN_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 2, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0xffffffffffffffffL, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x29eL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x560L, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[88];
static private final int[] jjstateSet = new int[176];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
public CPPParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public CPPParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 10)
         {
            jjmatchedKind = 10;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 7 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      CPPParser.endLine("comment", input_stream.getBeginLine(), (input_stream.getBeginColumn()),
                        input_stream.getEndLine(), (input_stream.getEndColumn()));
         break;
      case 9 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
      CPPParser.endLine("comment", input_stream.getBeginLine(), input_stream.getBeginColumn(),
                        input_stream.getEndLine(), input_stream.getEndColumn());
         break;
      default :
         break;
   }
}
}
